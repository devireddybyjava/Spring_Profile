Custom Generator:
=============

--->To create Customer generator we should implement Identifier Generator interface.

--->In that interface we have generate() method....

--->we should write logic in that method to generate PK column according to our requirement.

Example:

OD1
OD2
OD3
--
--
--
OD100
------------------------------------
here what we have to understand is column data type is varchar.

if we want to store value in this format our PK column type should be varchar.

here, the order id can be divided into 2 parts.

a) prefix ---> OD [it is fixed value]
b) suffix ----> Number(start with 1 and increment by 1)

--> As prefix is fixed we can create a constant for that

---> for suffix value we can create a Sequence.

Steps to develop Data JPA application with Custom Generator:
============================================

1) create a spring starter project with below dependencies..
       i)  Starter Data JPA
       ii) MySql Driver
       
2) Create Entity class using Annotations

3) Create Sequnce in DB for suffix value generation 
----
create sequence  pid_seq
start with 1000
increment by 1;       -----------

4) Create Custom Generator class by implementing Identifier Generator interface.

5) Configure custom genetaor in Entity
--------
          @Entity

          public class OrderEntity {

	@Id
	@GenericGenerator(name = "ord_sq", strategy = "com.param.spring.custom_Generator")     // In the strategy , we have to write our custom generator class because of our sequen logic execution.
	private String OrderId;
	private String OrderBy;
	private Date OrderDate;
	
         // setter and getter methods


         }  

          ------------------

6) Create Repository interface by extending data jpa repository.
----------
           
           public interface OrderDetailsRepository extends JpaRepository<OrderDetailEntity, Seriliazable>{

           }
  
           -------------------



============================== Boot Start Class====================================


@SpringBootApplication
public class Application {

	public static void main(String[] args) {

		ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);

		OrderDetailsRepository orderRepo = context.getBean(OrderDetailsRepository.class);
		
                    OrderDetailsEntity entity=new OrderDetailsEntity();
                      entity.setOrderBy("Param");
                      entity.setOrderDate( new Date());
                     orderRepo.save(entity);
      
                    context.close();

	}
}



==================================================================================





